import { useStore } from 'effector-react'
import { toast } from 'react-toastify'
import { useEffect, useState } from 'react'
import Head from 'next/head'

import Layout from '@/components/layout/Layout'
import useRedirectByUserCheck from '@/hooks/useRedirectByUserCheck'
import { IQueryParams } from '@/types/catalog'
import { $boilerPart, setBoilerPart } from '@/context/boilerPart'
import { getBoilerPartFx } from '@/api/boilerParts/boilerParts'
import ProductPage from '@/components/templates/ProductPage/ProductPage'
import { useRouter } from 'next/router'
import Custom404 from '../404'

function CatalogProductPage({ query }: { query: IQueryParams }) {
  const [error, setError] = useState(false)
  const { shouldLoadContent } = useRedirectByUserCheck()
  const boilerPart = useStore($boilerPart)
  const router = useRouter()

  useEffect(() => {
    loadBoilerPart()
  }, [router.asPath])

  const loadBoilerPart = async () => {
    try {
      const data = await getBoilerPartFx(
        `/boiler-parts/find/${query.productId}`
      )

      if (!data) {
        setError(true)
        return
      }

      setBoilerPart(data)
    } catch (err) {
      toast.error((err as Error).message)
    }
  }

  return (
    <>
      <Head>
        <title>
          Boilers House | {shouldLoadContent ? boilerPart.product_name : ''}
        </title>
        <meta charSet="UTF-8" />
        <meta httpEquiv="X-UA-Compatible" content="IE=edge" />
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link
          rel="icon"
          type="image/png"
          sizes="32x32"
          href="/img/logo-fav.png"
        />
      </Head>
      {error ? (
        <Custom404 />
      ) : (
        shouldLoadContent && (
          <Layout>
            <main>
              <ProductPage />
              <div className="overlay" />
            </main>
          </Layout>
        )
      )}
    </>
  )
}

export async function getServerSideProps(context: { query: IQueryParams }) {
  return {
    props: { query: { ...context.query } },
  }
}

export default CatalogProductPage
